%Loop:Tabs
%FileOverwrite:components\=<Screen.$>\=<Screen.$>=<Tabs.$>.tsx
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/

import React from 'react';
import { Modal, ModalHeader, ModalBody } from 'reactstrap';
import ReactTable from 'react-table';
import { Utils } from '../Utils';

import { I=<Screen.$>Data, I=<Tabs.$> } from './=<Screen.$>Types';
import =<Screen.$>=<Tabs.$>Form from './=<Screen.$>=<Tabs.$>Form';

import { ISelectValue } from '../GeneralTypes';
import { =<Screen.$>API } from './=<Screen.$>API';
import { UserContext } from '../../context/UserContext';

interface IProps {
    currentData: I=<Screen.$>Data;
    update=<Tabs.$>line: (values: I=<Tabs.$>, isAdding: boolean, currentIndex?: number) => void;
}

interface IState {
    modalAddIsOpen: boolean,
    modalEditIsOpen: boolean,
    modalDeleteIsOpen: boolean,
    current=<Tabs.$>Record: I=<Tabs.$> | null,
<<<<<<< HEAD
=======
    %Loop:Model %If:Lookup?=true
    =<JSONName>values : ISelectValue[], 
    %EndIf %/Loop:Model
>>>>>>> 9688682ea239520b67688a5702d077f52b379989
    currentIndex?: number
}

class =<Screen.$>=<Tabs.$> extends React.Component<IProps, IState> {

    constructor(props: Readonly<IProps>) {
        super(props);
        this.state = {
            modalAddIsOpen: false,
            modalEditIsOpen: false,
            modalDeleteIsOpen: false,
            current=<Tabs.$>Record: null,
%Loop:Model %If:Lookup?=true
            =<JSONName>values : [], 
%EndIf %/Loop:Model
        };

    }

    componentDidMount() {
%Loop:Model
%If:Lookup?=true
        =<Screen.$>API.loadDropdownValues("=<$>", this.context!.access_token)
            .then(res => {
                this.setState({ =<JSONName>values: res.data });
            }
            );

%EndIf
%/Loop:Model

    }


    private openAddModal = () => {
        this.setState({
            modalAddIsOpen: true,
            current=<Tabs.$>Record: { 
%Loop:Model
                =<JSONName> : =<JSONDefault>,
%/Loop:Model
            modifier: "Unchanged" }
        });
    }

    private closeAddModalNoSave = () => {
        this.setState({
            modalAddIsOpen: false,
            current=<Tabs.$>Record: null
        });
    }

    private openEditModal = (row: { row: { _index: number; }; }) => {
        if (this.props.currentData.=<Tabs.JSONName>Info) {
            this.setState({
                current=<Tabs.$>Record: ((this.props.currentData.=<Tabs.JSONName>Info[row.row._index]) as I=<Tabs.$>),
                modalEditIsOpen: true,
                currentIndex: row.row._index
            })
        }
    }

    private closeEditModalNoSave = () => {
        this.setState({
            modalEditIsOpen: false,
            current=<Tabs.$>Record: null
        });
    }

    private openDeleteModal = (row: { row: { _index: number; }; }) => {
        if (this.props.currentData.=<Tabs.JSONName>Info) {
            this.setState({
                current=<Tabs.$>Record: ((this.props.currentData.=<Tabs.JSONName>Info[row.row._index]) as I=<Tabs.$>),
                modalDeleteIsOpen: true,
                currentIndex: row.row._index
            })
        }
    }

    private closeDeleteModalNoSave = () => {
        this.setState({
            modalDeleteIsOpen: false,
            current=<Tabs.$>Record: null
        });
    }

    private update=<Tabs.$>Line = (values: I=<Tabs.$>) => {
        // update the record
        if (values.modifier !== "Added") {
            values.modifier = "Modified";
        }
        this.props.update=<Tabs.$>line(values, false, this.state.currentIndex);

        this.setState({
            modalEditIsOpen: false,
            current=<Tabs.$>Record: null
        });
    }

    private add=<Tabs.$>Line = (values: I=<Tabs.$>) => {
        // add the record
        values.modifier = "Added";
        this.props.update=<Tabs.$>line(values, true, this.state.currentIndex);

        this.setState({
            modalAddIsOpen: false,
            current=<Tabs.$>Record: null
        });
    }

    private delete=<Tabs.$>Line = (values: I=<Tabs.$>) => {
        // add the record
        values.modifier = "Deleted";
        this.props.update=<Tabs.$>line(values, false, this.state.currentIndex);

        this.setState({
            modalDeleteIsOpen: false,
            current=<Tabs.$>Record: null
        });
    }

    render() {
        const =<Tabs.JSONName>columns = [
            {
                Header: 'Actions',
                Cell: (row: { row: { _index: number; }; }) => (
                    <div className="w3-bar">
                        <button className="w3-bar-item w3-button" title="Edit" onClick={() => { this.openEditModal(row); }}>
                            <i className="fa fa-pencil" ></i>
                        </button>
                        <button className="w3-bar-item w3-button" title="Delete" onClick={() => { this.openDeleteModal(row); }}>
                            <i className="fa fa-trash-o" ></i>
                        </button>
%If:Actions?
                        <div className="w3-dropdown-hover">
                            <button className="w3-button" title="More actions...">...</button>
                            <div className="w3-dropdown-content w3-bar-block w3-card-4">
%Loop:Actions
                                <a onClick={() => { this.performAction=<Name>(row); }} className="w3-bar-item w3-button" >=<Title></a>
%/Loop:Actions
                            </div>
                        </div>
%EndIf
                    </div>
                ),
                sortable: false
            },
%Loop:Model
            {
                Header: '=<Title>',
%If:Type=date
                accessor: (d: I=<Tabs.$>) => Utils.formatDate(d.=<JSONName>),
                // date sorting
                sortMethod: Utils.dateSorter,
%Else
%If:Type=double
				accessor: (d: I=<Tabs.$>) => Utils.formatAmount(d.=<JSONName>),
				style: { 'textAlign': "right" },
%Else
				accessor: '=<Name>',
%EndIf
%EndIf
<<<<<<< HEAD
=======
                id: '=<JSONName>',
>>>>>>> 9688682ea239520b67688a5702d077f52b379989
                show: =<Show>
            } %If:HasMore , %EndIf
%/Loop:Model
        ];

        const tabledata = this.props.currentData.=<Tabs.JSONName>Info as I=<Tabs.$>[];
        //).filter(r => r.modifier != "Deleted") : this.props.currentData.=<Tabs.JSONName>Info as I=<Tabs.$>[];

        return (
            <div>
                <button className="w3-button w3-light-grey w3-round" onClick={this.openAddModal} title="Add new record">
                    <i className="fa fa-plus-circle" ></i>&nbsp;Add new
                </button>
                {this.props.currentData && (
                    <ReactTable className="-striped"
                        data={tabledata}
                        minRows={1}
                        columns={=<Tabs.JSONName>columns}
                    />)
                }
                <Modal isOpen={this.state.modalEditIsOpen} >
                    <ModalHeader toggle={this.closeEditModalNoSave} charCode="&times;" >Edit =<Tabs.$></ModalHeader>
                    <ModalBody>
<<<<<<< HEAD
                        <=<Screen.$>=<Tabs.$>Form buttonText="Save" currentData={this.state.current=<Tabs.$>Record as I=<Tabs.$>} updateValues={this.update=<Tabs.$>Line} />
=======
                        <=<Screen.$>=<Tabs.$>Form buttonText="Save" currentData={this.state.current=<Tabs.$>Record as I=<Tabs.$>} updateValues={this.update=<Tabs.$>Line} 
%Loop:Model %If:Lookup?=true
                            =<JSONName>values = {this.state.=<JSONName>values} 
%EndIf %/Loop:Model
                        
                        />
>>>>>>> 9688682ea239520b67688a5702d077f52b379989
                    </ModalBody>
                </Modal>
                <Modal isOpen={this.state.modalAddIsOpen} >
                    <ModalHeader toggle={this.closeAddModalNoSave} charCode="&times;" >Add =<Tabs.$></ModalHeader>
                    <ModalBody>
<<<<<<< HEAD
                        <=<Screen.$>=<Tabs.$>Form buttonText="Add" currentData={this.state.current=<Tabs.$>Record as I=<Tabs.$>} updateValues={this.add=<Tabs.$>Line} />
=======
                        <=<Screen.$>=<Tabs.$>Form buttonText="Add" currentData={this.state.current=<Tabs.$>Record as I=<Tabs.$>} updateValues={this.add=<Tabs.$>Line} 
%Loop:Model %If:Lookup?=true
                            =<JSONName>values = {this.state.=<JSONName>values} 
%EndIf %/Loop:Model
                        />
>>>>>>> 9688682ea239520b67688a5702d077f52b379989
                    </ModalBody>
                </Modal>
                <Modal isOpen={this.state.modalDeleteIsOpen} >
                    <ModalHeader toggle={this.closeDeleteModalNoSave} charCode="&times;" >Delete =<Tabs.$></ModalHeader>
                    <ModalBody>
<<<<<<< HEAD
                        <=<Screen.$>=<Tabs.$>Form buttonText="Delete" currentData={this.state.current=<Tabs.$>Record as I=<Tabs.$>} updateValues={this.delete=<Tabs.$>Line} />
=======
                        <=<Screen.$>=<Tabs.$>Form buttonText="Delete" currentData={this.state.current=<Tabs.$>Record as I=<Tabs.$>} updateValues={this.delete=<Tabs.$>Line} 
%Loop:Model %If:Lookup?=true
                            =<JSONName>values = {this.state.=<JSONName>values} 
%EndIf %/Loop:Model
                        />
>>>>>>> 9688682ea239520b67688a5702d077f52b379989
                    </ModalBody>
                </Modal>
            </div>
        );
    }
};

export default =<Screen.$>=<Tabs.$>;

%/File

%/Loop:Tabs
