%Loop:Tabs
%FileOverwrite:components\=<Screen.$>\=<Screen.$>=<Tabs.$>Form.tsx
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/

import React from 'react';
import { Formik } from 'formik';
import * as Yup from 'yup';
<<<<<<< HEAD
import { Form, Datepicker, Input, Textarea, SubmitBtn } from 'react-formik-ui'
=======
import { Form, Datepicker, Input, Textarea, SubmitBtn, Select } from 'react-formik-ui'
>>>>>>> 9688682ea239520b67688a5702d077f52b379989

import { I=<Tabs.$> } from './=<Screen.$>Types';
import { ISelectValue } from '../GeneralTypes';
import { UserContext } from '../../context/UserContext';


interface IProps {
    currentData: I=<Tabs.$>;
    %Loop:Model %If:Lookup?=true
    =<JSONName>values : ISelectValue[]; 
    %EndIf %/Loop:Model
    buttonText: string;
    updateValues:  (values: I=<Tabs.$>) => void;
}

interface IState {
    isSubmitting: boolean
}

class =<Screen.$>=<Tabs.$>Form extends React.Component<IProps, IState> {

    constructor(props: Readonly<IProps>) {
        super(props);
        this.state = { isSubmitting: false };
    }

    render() {
        return (
            <Formik
                initialValues={this.props.currentData as any}
                enableReinitialize={true}
                onSubmit={(values, { setSubmitting }) => {
                    this.props.updateValues({...values});
                    setSubmitting(false);
                }}
                validationSchema={Yup.object({
%Loop:Model
                    =<JSONName>: Yup.=<YupType>()
%If:Length?!=unlimited
                        .max(=<Length>, 'Must be =<Length> characters or less')
%EndIf
%If:Nullable?=false
                        .required('Required')
%EndIf
%If:Values?
                        .oneOf([
%Loop:Values
                        '=<Values.$>',
%/Loop:Values
                        ])
%EndIf %If:HasMore , %EndIf
%/Loop:Model
                })}

            >
                <Form className="w3-container" mode="themed">
%Loop:Model
<<<<<<< HEAD
%If:Type=daterange
                    <div className="w3-cell-row">
                        <div className="w3-cell">
                            <Datepicker name="=<Fromdate>" label="=<Title>"  />
                        </div>
                        <div className="w3-cell">
                            <Datepicker name="=<Todate>"  />
                        </div>
                    </div>
%Else
%If:Type=code
                    <Select name='=<JSONName>' label='=<Title>' options={this.props.=<JSONName>values}
%Else
%If:Type=double
                    <Input name="=<JSONName>" label="=<Title>" type="number" step="0.01"
%Else
%If:Length?=unlimited
                    <Textarea name="=<JSONName>" label="=<Title>"
%Else
                    <Input name="=<JSONName>" label="=<Title>"
%EndIf
%EndIf
%EndIf
%If:Key?=true
                    disabled
%EndIf
                     />
%EndIf
=======
                    <=<UIControl>
                     />
>>>>>>> 9688682ea239520b67688a5702d077f52b379989
%/Loop:Model
                    <hr />
                    <SubmitBtn className="w3-button w3-light-grey w3-round" title={this.props.buttonText + "s this record"} disabled={this.state.isSubmitting}>
                        <i className="fa fa-save" ></i>&nbsp;{this.props.buttonText}
                    </SubmitBtn>
                </Form>
            </Formik>
        );
    }
};
export default =<Screen.$>=<Tabs.$>Form;

%/File

%/Loop:Tabs
