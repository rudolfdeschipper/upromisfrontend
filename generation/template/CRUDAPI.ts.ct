%FileOverwrite:components\=<Sceen.$>API.tsx

import { ILoadResult, IListInfo, ISaveMessage, IAPIResult, ISelectValueList } from '../GeneralTypes';
import { Utils } from '../Utils';

import { I=<Screen.$>Data } from './=<Screen.$>Types';

export class =<Screen.$>API {

    static loadList = (listInfo: IListInfo) => fetch('https://=<Screen.APIUrl>/get=<Screen.$>data', {
        method: 'POST',
        headers: {
            'Accept': 'application/json, text/plain, */*',
            'Content-Type': 'application/json;charset=UTF-8'
        },
        body: JSON.stringify({
            page: listInfo.page,
            pageSize: listInfo.pageSize,
            sorted: listInfo.sorted,
            filtered: listInfo.filtered
        })
    })
        .then(response => {
            return response.json() as Promise<ILoadResult<I=<Screen.$>Data>>;
        })
        ;

    static loadListForExport = (title: string, listInfo: IListInfo) => fetch('https://=<Screen.APIUrl>/get=<Screen.$>dataexport', {
        method: 'post',
        headers: {
            'Accept': 'application/json, text/plain, */*',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            page: 1,
            pageSize: listInfo.pageSize,
            sorted: listInfo.sorted,
            filtered: listInfo.filtered
        })
    })
        .then(response => {
            response.blob().then(blob => {
                let url = window.URL.createObjectURL(blob);
                let a = document.createElement('a');
                let filename = title + " - " + Utils.formatDate(Date.now()).replace(/\//g, "-") + ".xlsx";
                a.href = url;
                a.download = filename;
                a.click();
                a.remove();
            });
        })
        .catch(e => console.error(e))
        ;

    static saveRecord = (message: ISaveMessage<I=<Screen.$>Data>): Promise<IAPIResult<I=<Screen.$>Data>> => {

        return fetch('https://=<Screen.APIUrl>/postone=<Screen.$>data', {
            method: message.action,
            headers: {
                'Accept': 'application/json, text/plain, */*',
                'Content-Type': 'application/json;charset=UTF-8'
            },
            body: JSON.stringify({
                id: message.id,
                dataSubject: message.dataSubject as I=<Screen.$>Data,
                action: message.action,
                subaction: message.subaction,
                additionalData: message.additionalData

            })
        })
            .then(response => {
                return response.json() as Promise<IAPIResult<I=<Screen.$>Data>>;
            })
    };

    static loadOneRecord = (id: number): Promise<IAPIResult<I=<Screen.$>Data>> => {
        return (fetch('https://=<Screen.APIUrl>/getone=<Screen.$>data', {
            method: 'post',
            headers: {
                'Accept': 'application/json, text/plain, */*',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                ID: id
            })
        })
            .then(response => {
                return response.json() as Promise<IAPIResult<I=<Screen.$>Data>>;
            }))
    }

    static loadDropdownValues = (valueType: string): Promise<ISelectValueList> => {
        return (fetch('https://=<Screen.APIUrl>/getselectvalues', {
            method: 'post',
            headers: {
                'Accept': 'application/json, text/plain, */*',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                valueType: valueType
            })
        })
            .then(response => {
                return response.json() as Promise<ISelectValueList>;
            }))

    }

}

%/File