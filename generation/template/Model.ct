%Loop:Models
%FileOverwrite:Models\I=<$>Repository.cs
%Log:IRepository =<$>
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>api.Models
{
    public interface I=<$>Repository : IRepository<=<$>DTO>
    {
    }
}
%/File

%FileOverwrite:Models\=<$>Repository.cs
%Log:Repository =<$>
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using APIUtils.APIMessaging;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>api.Models
{

    public class =<$>Repository : I=<$>Repository
    {
        =<Microservice.$>DbContext _context { get; set; }

        public =<$>Repository(=<Microservice.$>DbContext context)
        {
            _context = context;

        }
        public IQueryable<=<$>DTO> List => _context.=<SetName>.Select(c => Transformers.Transform(c, new =<$>DTO() { Modifier = "Unchanged" })).AsQueryable();

        public async Task<=<$>DTO> Post(SaveMessage<=<$>DTO> rec)
        {
            // TODO: add validations
            // TODO: check for new users to create in the team composition list

            =<$> record = Transformers.Transform(rec.DataSubject, new =<$>()) as =<$>;

%Loop:Children
%If:!Lazy
            record.=<SetName>.ForEach(pi =>
            {
                pi.=<Models.$> = record;
            });
%EndIf
%/Loop:Children

//            record.AccountInfo = _context.AccountInfo.FirstOrDefault();

//            record.ParentContract = _context.Contracts.Find(rec.DataSubject.ParentContractID);

            _context.=<SetName>.Add(record);

            await _context.SaveChangesAsync();

            return Transformers.Transform(record, new =<$>DTO());
        }

        public async Task<=<$>DTO> Put(SaveMessage<=<$>DTO> rec)
        {
            var ctr = await _context.=<SetName>.Where(c => c.ID == rec.ID)
%Loop:Children
                .Include("=<$>")
%/Loop:Children
                .FirstOrDefaultAsync();

            if (ctr == null)
            {
                return null;
            }

            ctr = Transformers.Transform(rec.DataSubject, ctr);

            await _context.SaveChangesAsync();

            return Transformers.Transform(ctr, new =<$>DTO());
        }

        public async Task<bool> Delete(SaveMessage<=<$>DTO> rec)
        {
            var ctr = _context.=<SetName>.FirstOrDefault(c => c.ID == rec.ID);

            if (ctr == null)
            {
                return false;
            }

            _context.=<SetName>.Remove(ctr);

            await _context.SaveChangesAsync();

            return true;
        }

        public async Task<=<$>DTO> Get(int id)
        {
            var record = await _context.=<SetName>.Where(c => c.ID == id)
%Loop:Children
                .Include("=<$>")
%/Loop:Children
                .FirstOrDefaultAsync();

            var ctr = Transformers.Transform(record, new =<$>DTO() { Modifier = "Unchanged" });

            return ctr;
        }
    }
}
%/File

%FileOverwrite:Models\=<$>.cs
%Log:Model =<$>
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using APIUtils.APIMessaging;

namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>api.Models
{

    public class =<Name> 
    {
%Loop:Properties
%If:Values?
        public static ListValue[] =<$>Values =
        {
%Loop:Values
            new ListValue() { Value = "=<$>", Label = "=<[$]>" } %If:HasMore , %EndIf
            
%/Loop:Values
        };
%EndIf
%/Loop:Properties


%Loop:Properties
%If:Key?
        [Key]
%EndIf
%If:Nullable=false
        [Required]
%EndIf
%If:Length?!=unlimited
        [StringLength(=<Length>)]
%EndIf
%If:Format?
        [DisplayFormat(DataFormatString = "{0:=<Format>}")]
%EndIf
        public =<Type> =<$> { get; set; } %If:Default? = =<Default>; %EndIf

%/Loop:Properties

        // Default model properties
        [DisplayFormat(DataFormatString = "{0:dd/MMM/yyyy}")]
        public DateTime CreatedOn { get; set; } = DateTime.Now;

        public string CreatedBy { get; set; }

        [DisplayFormat(DataFormatString = "{0:dd/MMM/yyyy}")]
        public DateTime UpdatedOn { get; set; } = DateTime.Now;

        public string UpdatedBy { get; set; }

%Loop:Children
        public %If:Lazy? virtual %EndIf List<=<$>> =<SetName> { get; private set; } = new List<=<$>>();
%/Loop:Children

    }
}

%/File

%Loop:Children
%If:!Lazy?=true

%Log:Model =<$>
%FileOverwrite:Models\=<$>.cs
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using APIUtils.APIMessaging;

namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>api.Models
{

    public class =<$> 
    {
%Loop:Model
%If:Values?
        public static ListValue[] =<$>Values =
        {
%Loop:Values
            new ListValue() { Value = "=<$>", Label = "=<[$]>" } %If:HasMore , %EndIf

%/Loop:Values
        };
%EndIf
%/Loop:Model

%Loop:Model
%If:Type?
%If:Key?
        [Key]
%EndIf
%If:Nullable=false
        [Required]
%EndIf
%If:Length?!=unlimited
        [StringLength(=<Length>)]
%EndIf
%If:Format?
        [DisplayFormat(DataFormatString = "{0:=<Format>}")]
%EndIf
        public =<Type> =<$> { get; set; } %If:Default? = =<Default>; %EndIf

%EndIf
%/Loop:Model

        // Parent property
        public =<Models.$> =<Models.$> { get; set; } 

        // Default model properties
        [DisplayFormat(DataFormatString = "{0:dd/MMM/yyyy}")]
        public DateTime CreatedOn { get; set; } = DateTime.Now;

        public string CreatedBy { get; set; }

        [DisplayFormat(DataFormatString = "{0:dd/MMM/yyyy}")]
        public DateTime UpdatedOn { get; set; } = DateTime.Now;

        public string UpdatedBy { get; set; }

    }
}
%/File
%EndIf
%/Loop:Children

%FileOverwrite:Models\=<$>DTO.cs
%Log:DTO =<$>
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>api.Models
{


    public class =<Name>DTO : DTOBase
    {
%Loop:Properties
%If:Key?
        [Key]
%EndIf
%If:Nullable=false
        [Required]
%EndIf
%If:Length?!=unlimited
        [StringLength(=<Length>)]
%EndIf
%If:Format?
        [DisplayFormat(DataFormatString = "{0:=<Format>}")]
%EndIf
        public =<Type> =<$> { get; set; } %If:Default? = =<Default>; %EndIf

%/Loop:Properties

        // Default model properties
        [DisplayFormat(DataFormatString = "{0:dd/MMM/yyyy}")]
        public DateTime CreatedOn { get; set; } = DateTime.Now;

        public string CreatedBy { get; set; }

        [DisplayFormat(DataFormatString = "{0:dd/MMM/yyyy}")]
        public DateTime UpdatedOn { get; set; } = DateTime.Now;

        public string UpdatedBy { get; set; }

%Loop:Children
        public %If:Lazy? virtual %EndIf List<=<$>DTO> =<SetName> { get; private set; } = new List<=<$>DTO>();
%/Loop:Children

    }
}

%/File

%Loop:Children
%If:!Lazy?=true
%Log:DTO =<$>
%FileOverwrite:Models\=<$>DTO.cs
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>api.Models
{


    public class =<$>DTO : DTOBase
    {
%Loop:Model
%If:Type?
%If:Key?
        [Key]
%EndIf
%If:Nullable=false
        [Required]
%EndIf
%If:Length?!=unlimited
        [StringLength(=<Length>)]
%EndIf
%If:Format?
        [DisplayFormat(DataFormatString = "{0:=<Format>}")]
%EndIf
        public =<Type> =<$> { get; set; } %If:Default? = =<Default>; %EndIf

%EndIf
%/Loop:Model

        // Parent property
        public =<Models.$> =<Models.$>DTO {get; set; } 

        // Default model properties
        [DisplayFormat(DataFormatString = "{0:dd/MMM/yyyy}")]
        public DateTime CreatedOn { get; set; } = DateTime.Now;

        public string CreatedBy { get; set; }

        [DisplayFormat(DataFormatString = "{0:dd/MMM/yyyy}")]
        public DateTime UpdatedOn { get; set; } = DateTime.Now;

        public string UpdatedBy { get; set; }

    }
}
%/File
%EndIf
%/Loop:Children

%/Loop:Models

%Log:Transformers
%FileOverwrite:Models\Transformers.cs
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace =<#Parameters.msNameSpace>=<Microservice.Namespace>api.Models
{

    public class Transformers
    {

%Loop:Models
        public static =<$> Transform(=<$>DTO from, =<$> to)
        {
%Loop:Properties
                to.=<$> = from.=<$>;
%/Loop:Properties

            // here we need to do some magic with the modifiers of the DTO collection:
%Loop:Children
%If:!Lazy
            TransformList<=<$>DTO, =<$>>(from.=<SetName>, to.=<SetName>, 
                (list, from) => list.Find(pt => pt.ID == from.ID),
                Transform);

%EndIf
%/Loop:Children
            return to;
        }

        public static =<$>DTO Transform(=<$> from, =<$>DTO to)
        {
%Loop:Properties
                to.=<$> = from.=<$>;
%/Loop:Properties

%Loop:Children
%If:!Lazy
            to.=<SetName>.AddRange(from.=<SetName>.Select(p => Transform(p, new =<$>DTO() { Modifier = "Unchanged" })));
%EndIf
%/Loop:Children

            return to;
        }

%Loop:Children
%If:!Lazy
        public static =<$> Transform(=<$>DTO from, =<$> to)
        {
%Loop:Model
            to.=<$> = from.=<$>;
%/Loop:Model

            return to;
        }

        public static =<$>DTO Transform(=<$> from, =<$>DTO to)
        {
%Loop:Model
            to.=<$> = from.=<$>;
%/Loop:Models

            return to;
        }

%EndIf
%/Loop:Children

%/Loop:Models

        private static void TransformList<F, T>(List<F> from, List<T> to, Func<List<T>, F, T> find, Func<F, T, T> transform) where F : DTOBase where T : class, new()
        {
            foreach (F p in from)
            {
                if (p.Modifier == "Deleted")
                {
                    if (find(to, p) is T toDelete)
                    {
                        to.Remove(toDelete);
                    }
                }
                if (p.Modifier == "Added")
                {
                    var toAdd = transform(p, new T());
                    to.Add(toAdd);
                }
                if (p.Modifier == "Modified")
                {
                    if (find(to, p) is T toUpdate)
                    {
                        _ = transform(p, toUpdate);
                    }
                }
            }
        }
    }
}

%/File

