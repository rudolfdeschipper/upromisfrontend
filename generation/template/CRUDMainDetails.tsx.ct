%FileOverwrite:components\=<App.$>\generated\=<App.$>Details.tsx
/*
**             ------ IMPORTANT ------
** This file was generated by ZeroCode2 on =<DateStamp>
** DO NOT MODIFY IT, as it can be regenerated at any moment.
** If you need this file changed, change the underlying model or its template.
*/

import React from 'react';
import "react-table/react-table.css";
import { RouteComponentProps, withRouter } from 'react-router';
import { Link } from 'react-router-dom';
import Tab from 'react-bootstrap/Tab';
import Tabs from 'react-bootstrap/Tabs';
import { IBusinessRuleResult, ISaveMessage, ISelectValue } from '../../GeneralTypes';
import { UserContext } from '../../../context/UserContext';

import =<App.$>Form from './=<App.$>Form';

%Loop:Tabs
import =<App.$>=<Tabs.$> from './=<App.$>=<Tabs.$>';
import { I=<Model.SetName> } from './=<App.$>Types';
%/Loop:Tabs

import { I=<App.$>Data } from './=<App.$>Types';
import { =<App.$>API } from './=<App.$>API';

import { Popup } from '../../Popup';
%If:Attachments=true
import Attachment from '../../Attachment/Attachment';
%EndIf

interface IState {
    currentData: I=<App.$>Data;
%Loop:Edit.Properties
%If:Lookup?=true
    =<JSONName>values: ISelectValue[],
%EndIf
%/Loop:Edit.Properties
    id: number,

    // popup stuff
    popupStyle: string,
    popupMessage: string,
    popupErrorList?: IBusinessRuleResult[],
    popupVisible: boolean;
}

class =<App.$>Details extends React.Component<RouteComponentProps<{ id?: string }>, IState> {
    static displayName = =<App.$>Details.name;

    static contextType = UserContext;

    constructor(props: Readonly<RouteComponentProps<{ id?: string }>>) {
        super(props);
        if (this.props.match.params.id && this.props.match.params.id !== "add") {
            this.state =
            {
                id: parseInt(this.props.match.params.id, 10),
                currentData: { 
                    
                    //id: 0, code: "", description: "", title: "", startdate: new Date(), enddate: new Date(), status: "", value: 0.0, paymentInfo: [], modifier: "Unchanged" 
%Loop:App.Edit.Properties
                    =<JSONName>: =<JSONDefault>,
%If:Lookup?=true
                    =<JSONName>Label: '',
%EndIf
%/Loop:App.Edit.Properties
%Loop:Tabs
                    =<Model.SetName>: [],
%/Loop:Tabs

                    modifier: "Unchanged"
                },
%Loop:Edit.Properties
%If:Lookup?=true
                =<JSONName>values: [],
%EndIf
%/Loop:Edit.Properties

                popupStyle: "",
                popupMessage: "",
                popupErrorList: [],
                popupVisible: false
            };
        } else {
            // adding
            this.state =
            {
                id: 0,
                currentData: 
                    this.props.history.location.state ? 
                    this.props.history.location.state as I=<App.$>Data 
                    : { 
%Loop:App.Edit.Properties
                    =<JSONName>: =<JSONDefault>,
%If:Lookup?=true
                    =<JSONName>Label: '',
%EndIf
%/Loop:App.Edit.Properties
%Loop:Tabs
                    =<Model.SetName>: [],
%/Loop:Tabs

                    modifier: "Added"
                    
                },
%Loop:Edit.Properties
%If:Lookup?=true
                =<JSONName>values: [],
%EndIf
%/Loop:Edit.Properties

                popupStyle: "",
                popupMessage: "",
                popupErrorList: [],
                popupVisible: false
            };

        }
    }

    componentDidMount() {
        // fetch the record
        if (this.state.id !== 0) {
            =<App.$>API.loadOneRecord(this.state.id, this.context!.access_token)
                .then((res) => {
                    // Update form values
                    this.setState({
                        currentData: { ...res.dataSubject!, modifier: "Modified" }
                    });
                })
                .catch(e => console.error(e));
        }
%Loop:Edit.Properties
%If:Lookup?=true
%If:Reference?=true
        =<App.$>API.loadDropdownValues("=<$>Reference", this.context!.access_token)
            .then(res => {
                this.setState({ =<JSONName>values: res.data });
            }
            );

%Else
        =<App.$>API.loadDropdownValues("=<$>", this.context!.access_token)
            .then(res => {
                this.setState({ =<JSONName>values: res.data });
            }
            );

%EndIf
%EndIf
%/Loop:Edit.Properties
    }

    private saveOneRecord = (subaction: string, record: I=<App.$>Data) => {
        const action = (record.modifier === "Added") ? "POST" : (record.modifier === "Deleted") ? "DELETE" : "PUT";

        const toSave: ISaveMessage<I=<App.$>Data> =
        {
            id: record.id,
            action: action,
            dataSubject:
            {
                ...record,
                // don't forget to take the sublists as well:
                %Loop:Tabs
                    =<Tabs.Model.SetName>: this.state.currentData.=<Tabs.Model.SetName> %If:HasMore , %EndIf
                %/Loop:Tabs
            },
            subaction: subaction,
            additionalData: []
        };

        =<App.$>API.saveRecord(toSave, this.context!.access_token)
            .then(result => {
                if (result.success) {
                    this.setState({ ...this.state, id: result.dataSubject!.id, currentData: result.dataSubject! })
                    // put a toast here
                    this.setState({ popupVisible: true, popupMessage: "Save result: " + result.message, popupErrorList: result.additionalInfo, popupStyle: "success" });
                    console.log("Save result: " + result.message)
                } else {
                    // put a toast here
                    console.error("Save failed " + JSON.stringify(result))
                    this.setState({ popupVisible: true, popupMessage: "Save failed: " + result.message, popupErrorList: result.additionalInfo, popupStyle: "danger" });
                }
            }
            )
            .catch(e => {
                console.error("saveRecord exception:");
                console.exception(e);
                this.setState({ popupVisible: true, popupMessage: "Save failed: " + e, popupErrorList: [], popupStyle: "danger" })
            })
            document!.getElementById('top')!.scrollIntoView();
    }

%Loop:Tabs
    private update=<Tabs.$>line = (values: I=<Tabs.Model.SetName>, isAdding: boolean, currentIndex?: number) => {
        if (isAdding) {
            let newData = this.state.currentData;

            if(newData.=<Tabs.Model.SetName> === undefined || newData.=<Tabs.Model.SetName> === null)
            {
                newData.=<Tabs.Model.SetName> = [];
            }
            newData.=<Tabs.Model.SetName>.push(values);

            this.setState({ currentData: newData });
        } else {
            if (typeof (currentIndex) === "number" && this.state.currentData.=<Tabs.Model.SetName>) {
                let newData = this.state.currentData;
                if (newData.=<Tabs.Model.SetName>) {
                    // if we deleted a newly added element, just remove it from the list
                    if (values.modifier === "Deleted" && values.id === 0) {
                        newData.=<Tabs.Model.SetName>.splice(currentIndex, 1);
                    } else {
                        newData.=<Tabs.Model.SetName>[currentIndex] = values;
                    }
                    this.setState({ currentData: newData });
                }
            }
        }
        this.setState({ popupVisible: true, popupMessage: (isAdding ? "Added" : values.modifier) + " =<Tabs.$> line", popupErrorList: [],popupStyle: "info" });
        // alert("update=<Tabs.$>line " + (isAdding ? "Added" : values.modifier) + " " + JSON.stringify(this.state.currentData, null, 2));
    }
%/Loop:Tabs

    render() {
        return (
            <React.Fragment>
                <Link id='top' to={"/=<App.$>"} className="w3-button w3-light-grey w3-round" title="Back to list">
                    <i className="fa fa-list" ></i>&nbsp;Back to List
                </Link>
                <h5>=<App.$> details for {this.state.currentData.title}</h5>
                <hr/>
                <Popup visible={this.state.popupVisible} message={this.state.popupMessage} style={this.state.popupStyle} onDismiss={() => { this.setState({ popupVisible: false }) }} errorList={this.state.popupErrorList}/>
                <Tabs defaultActiveKey='details' id='detailstab'>
                    <Tab eventKey='details' title='Details'>
                        <=<App.$>Form buttonText="Save" currentData={this.state.currentData} 
%Loop:Edit.Properties
%If:Lookup?=true
                            =<JSONName>values={this.state.=<JSONName>values}
%EndIf
%/Loop:Edit.Properties
                            saveAction={this.saveOneRecord} />
                    </Tab>
%Loop:Tabs
                    <Tab eventKey="=<Tabs.JSONName>tab" title="=<Tabs.Title>">
                        <=<App.$>=<Tabs.$> currentData={this.state.currentData} update=<Tabs.$>line = {this.update=<Tabs.$>line} />
                    </Tab>
%/Loop:Tabs
%If:App.Attachments=true
                    <Tab eventKey="attachments" title="Attachments">
                        {
                            this.state.id === 0 ? <p>You shoud save the new =<App.$> before adding attachments</p> :
                                <Attachment parentItem='00000000-0000-0000-0000-000000000000' uploadedBy={this.context!.profile.name} />
                        }
                    </Tab>
%EndIf
                </Tabs>
            </React.Fragment>
        );
    }


}

// required to have lazy loading
export default withRouter(=<App.$>Details);

%/File
